input {
#Mysql queue-ban össze kell fűzni a sorokat. A másikban nem vizsgáljuk.
	rabbitmq {
		type => "RabbitMQ"
		codec    => "json"
		host => "localhost"
		user     => "netacademia"
		password => "neta"
		queue    => "syslog-q-mysql-central"
		durable => true

		ack => true
		auto_delete => false
		exclusive => false
		key => "logstash"
		passive => false
		port => 5672
		prefetch_count => 256
		ssl => false
		threads => 1
		vhost => "/"	
		codec => multiline {
			pattern => "^%{NUMBER} *%{NUMBER}"
			negate => true
			what => "previous"
		}
	}
	rabbitmq {
		type => "RabbitMQ"
		codec    => "json"
		host => "localhost"
		user     => "netacademia"
		password => "neta"
		queue    => "app-logging-queue-central"
		durable => true

		ack => true
		auto_delete => false
		exclusive => false
		key => "logstash"
		passive => false
		port => 5672
		prefetch_count => 256
		ssl => false
		threads => 1
		vhost => "/"		
	}
}

filter {
	if [type] == "RabbitMQ" {
		grok {
			match => {"timestamp"=> "%{NONNEGINT:timestamp1}"}
		}
		date {
			match => [ "timestamp1", "UNIX_MS" ] 
		}
	}
	if [type] == "hp" {
		grok {
			match => [ "message", "(?<timestamp>%{SYSLOGTIMESTAMP} %{YEAR}) %{IPORHOST:hostname} %{DATA:switchcat}:\s+%{GREEDYDATA:message}" ]
			overwrite => [ "message", "host" ]
		}
		date {
			match => [ "timestamp" , "MMM dd HH:mm:ss yyyy" ]
			remove_field => "timestamp"
		}
	}
	if [type] == "aten" {
		mutate {
			add_field => { "ip" => "%{host}" }
		}
		grok {		
			match => [ "message", "<[0-9]*>\s%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:tmp}, \[%{DATA:host}\] %{GREEDYDATA:message}"]
			overwrite => [ "message", "host" ]
			remove_field => [ "tmp" ]
		}
		date {
			timezone => "CET"
			match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss"]
			remove_field => "timestamp"
		}
	}
	if [type] == "apache" {
		grok {
			match => [ "message", "%{COMBINEDAPACHELOG}" ]
			match => [ "message" , "%{COMMONAPACHELOG}" ]
		}
		date {
			match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
			remove_field => "timestamp"
		}
	}
	if [type] == "apache_error" {
		grok {
			match => { "message" => "\[(?<timestamp>%{DAY:day} %{MONTH:month} %{MONTHDAY} %{TIME} %{YEAR})\] \[%{WORD:module}:%{LOGLEVEL:loglevel}\] \[pid %{NUMBER:pid}\] %{DATA:errorcode}: %{GREEDYDATA:message}" }
			overwrite => [ "message" ]	
        }
		mutate {
			#gsub => [ "timestamp", "\.\d{6}", ""]
		}
        date {
            match => [ "timestamp" , "EEE MMM dd HH:mm:ss.SSSSSS yyyy" ]
			remove_field => "timestamp"
        }
    }
	if [type] == "apache_sslrequest" {
		grok {
			match => { "message" => "\[%{HTTPDATE:timestamp}\] %{IPORHOST:client} %{NOTSPACE:protocol} %{NOTSPACE:cipher} \"(%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" }
		}
		date {
			match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
			remove_field => "timestamp"
		}
	}
	if [type] == "syslog" {
		grok {
			match => { "message" => "%{SYSLOGBASE} %{GREEDYDATA:message}" }
			overwrite => [ "message" ]
		}
		date {
			match => [ "timestamp" , "MMM dd HH:mm:ss" ]
			remove_field => "timestamp"
		}
	}
	# Ennek a működéséhez kell egy multiline-codec az első imputba!
	if [type] == "mysql" {
    	# Strip out MySQLs messy timestamps
        grok {
			match => [ 'message', "(?m)^%{NUMBER:date} *%{NOTSPACE:time} %{GREEDYDATA:message}" ]
            overwrite => [ 'message' ]
            add_field => { "mysql_time" => "%{date} %{time}" }
        }
		# Check if we have a severity field
        if [message] =~ /^\[/ {
			grok {
				match => [ 'message', "(?m)\[%{NOTSPACE:severity}\] %{GREEDYDATA:message}" ]
				overwrite => [ 'message' ]
            }
        }
		# If the message contains WSREP:, it regards the galera cluster
        if  [message] =~ /WSREP:/ {
			mutate {
				replace => [ "type", "Galera" ]
			}
			grok {
				match => [ 'message', "(?m)WSREP: %{GREEDYDATA:message}" ]
				overwrite => [ 'message' ]
			}
        } 
		date {
			match => [ "mysql_time" , "yyMMdd HH:mm:ss" ]
			remove_field => [ "date" , "time" , "mysql_time" ]
		}
	}
	if [type] == "bacula" {
		grok {
			match => [ "message" , "(?<timestamp>%{MONTHDAY}-%{DATA} %{HOUR}:%{MINUTE}) %{HOSTNAME:hostname} JobId %{INT:jobid}: %{GREEDYDATA:message}" ]
			overwrite => [ "message" ]
		}
		mutate {
			gsub => [ 
				"timestamp" , "már" , "mar",
				"timestamp" , "ápr" , "apr",
				"timestamp" , "máj" , "may",			
				"timestamp" , "jún" , "jun",
				"timestamp" , "júl" , "jul",
				"timestamp" , "okt" , "oct" 				
			]
		}		
		date {
			#locale => "hu_HU"
			match => [ "timestamp" , "dd-MMM HH:mm" ]
			remove_field => [ "timestamp" ]
		}
	}
}


output {
	if [type] == "wineventlog" {
		elasticsearch {
			codec => "plain"
			hosts => "localhost"
			index => "winlogbeat-%{+YYYY.MM.dd}"
			#index => "logstash-%{+YYYY.MM.dd}"
		}
	} else {
		elasticsearch {
			codec => "plain"
			hosts => "localhost"
			index => "logstash-%{+YYYY.MM.dd}"
		}
	}
	#stdout {
	#	codec => "rubydebug"
	#}
}
